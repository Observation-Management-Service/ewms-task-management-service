name: wipac ci/cd

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'


env:
  DOCKER_IMAGE_NAME: oms-test/tms-test
  _TEST_COLLECTOR: foo
  _TEST_SCHEDD: bar
  EWMS_ADDRESS: ""
  EWMS_TOKEN_URL: ""
  EWMS_CLIENT_ID: ""
  EWMS_CLIENT_SECRET: ""
  JOB_EVENT_LOG_DIR: tests/job_event_logs
  TMS_WATCHER_INTERVAL: 1
  JOB_EVENT_LOG_MODIFICATION_EXPIRY: 5


jobs:

  py-versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.versions.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: versions
        uses: WIPACrepo/wipac-dev-py-versions-action@v2.5


  #############################################################################
  # LINTERS
  #############################################################################

  flake8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
      - uses: WIPACrepo/wipac-dev-flake8-action@v1.2
        with:
          max-complexity: 10

  mypy:
    needs: [ py-versions ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py3 }}
      - uses: WIPACrepo/wipac-dev-mypy-action@v2.0


  #############################################################################
  # PACKAGING
  #############################################################################

  writable-branch-detect:
    runs-on: ubuntu-latest
    outputs:
      OKAY: ${{ steps.detect.outputs.OKAY }}
    steps:
      - name: is this a bot-writable branch?
        id: detect
        # dependabot can't access normal secrets
        #   & don't run non-branch triggers (like tags)
        #   & we don't want to trigger an update on PR's merge to main/master/default (which is a branch)
        run: |
          set -euo pipefail
          if [[ \
              ${{github.actor}} != 'dependabot[bot]' && \
              ${{github.ref_type}} == 'branch' && \
              ${{format('refs/heads/{0}', github.event.repository.default_branch)}} != ${{github.ref}} \
          ]]; then
            echo "OKAY=true" >> "$GITHUB_OUTPUT"
            echo "yes, this branch is compatible"
          else
            echo "OKAY=false" >> "$GITHUB_OUTPUT"
            echo "no, this branch is incompatible"
          fi

  py-setup:
    needs: [ writable-branch-detect ]
    runs-on: ubuntu-latest
    steps:
      - if: needs.writable-branch-detect.outputs.OKAY == 'true'
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - if: needs.writable-branch-detect.outputs.OKAY == 'true'
        uses: WIPACrepo/wipac-dev-py-setup-action@v3.1
        with:
          base-keywords: WIPAC IceCube "Observation Management Service" "Event Workflow Management Service"

  py-dependencies:
    needs: [ writable-branch-detect ]
    runs-on: ubuntu-latest
    steps:
      - if: needs.writable-branch-detect.outputs.OKAY == 'true'
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - if: needs.writable-branch-detect.outputs.OKAY == 'true'
        uses: docker/setup-buildx-action@v2
      - if: needs.writable-branch-detect.outputs.OKAY == 'true'
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          tags: tms:py-dep-this
          load: true
      - if: needs.writable-branch-detect.outputs.OKAY == 'true'
        uses: WIPACrepo/wipac-dev-py-dependencies-action@v2.1


  #############################################################################
  # TESTS
  #############################################################################

  test-build-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v6
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=min
          file: Dockerfile
          tags: ${{ env.DOCKER_IMAGE_NAME }}:local

  test-build-singularity:
    needs: test-build-docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v6
        with:
          context: .
          cache-from: type=gha
          # cache-to: type=gha,mode=min
          file: Dockerfile
          tags: ${{ env.DOCKER_IMAGE_NAME }}:local
          load: true
      - uses: eWaterCycle/setup-apptainer@v2
        with:
          apptainer-version: 1.3.2
      - name: build singularity image
        run: |
          set -euo pipefail
          sudo singularity build $(basename ${{ env.DOCKER_IMAGE_NAME }}).sif docker-daemon://${{ env.DOCKER_IMAGE_NAME }}:local
          ls -lh $(basename ${{ env.DOCKER_IMAGE_NAME }}).sif
      - name: run singularity container
        run: |
          set -euo pipefail
          singularity run $(basename ${{ env.DOCKER_IMAGE_NAME }}).sif \
            ls

  unit-test:
    needs: [ py-versions ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py3 }}
      - run: |
          set -euo pipefail
          pip install .[tests]
      - run: |
          set -euo pipefail
          pytest -vvv tests/unit/


  #############################################################################
  # GITHUB RELEASE
  #############################################################################

  release:
    # only run on main/master/default
    if: format('refs/heads/{0}', github.event.repository.default_branch) == github.ref
    needs: [
      flake8,
      mypy,
      py-setup,
      py-versions,
      py-dependencies,
      test-build-docker,
      test-build-singularity,
      unit-test
    ]
    runs-on: ubuntu-latest
    concurrency: release
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Python Semantic Release
        uses: python-semantic-release/python-semantic-release@v7.34.6
        with:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          # repository_username: __token__
          # repository_password: ${{ secrets.PYPI_TOKEN }}
