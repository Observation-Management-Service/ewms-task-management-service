name: wipac ci/cd

on:
  # only on branch pushes
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'


env:
  DOCKER_IMAGE_NAME: oms-test/tms-test
  _TEST_COLLECTOR: foo
  _TEST_SCHEDD: bar
  EWMS_ADDRESS: ""
  EWMS_TOKEN_URL: ""
  EWMS_CLIENT_ID: ""
  EWMS_CLIENT_SECRET: ""
  JOB_EVENT_LOG_DIR: tests/job_event_logs
  TMS_WATCHER_INTERVAL: 1
  JOB_EVENT_LOG_MODIFICATION_EXPIRY: 5


jobs:

  py-versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.versions.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # setuptools-scm needs to access git tags
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
      - id: versions
        uses: WIPACrepo/wipac-dev-py-versions-action@v2.7


  #############################################################################
  # LINTERS
  #############################################################################

  flake8:
    needs: [ py-versions ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # setuptools-scm needs to access git tags
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py3 }}
      - uses: WIPACrepo/wipac-dev-flake8-action@v1.3
        with:
          max-complexity: 13  # ideal is ~10-15

  mypy:
    needs: [ py-versions ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # setuptools-scm needs to access git tags
          ref: ${{ github.sha }}  # lock to triggered commit ('github.ref is dynamic)
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py3 }}
      - uses: WIPACrepo/wipac-dev-mypy-action@v2.0


  #############################################################################
  # PACKAGING
  #############################################################################

  py-setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # setuptools-scm needs to access git tags
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          ref: ${{ github.ref }}  # dont lock to sha (action needs to push)
      - uses: WIPACrepo/wipac-dev-py-setup-action@v5.7
        with:
          mode: PACKAGING
          python_min: 3.11
          keywords_comma: "WIPAC, IceCube, Observation Management Service, Event Workflow Management System, EWMS, task, Task Management Service"
          auto_mypy_option: True

  py-dependencies:
    needs: [ flake8 ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # setuptools-scm needs to access git tags
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          tags: tms:py-dep-this
          load: true
      - uses: WIPACrepo/wipac-dev-py-dependencies-action@v3.1


  #############################################################################
  # TESTS
  #############################################################################

  test-build-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # setuptools-scm needs to access git tags
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v6
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=min
          file: Dockerfile
          tags: ${{ env.DOCKER_IMAGE_NAME }}:local

  test-build-apptainer:
    needs: test-build-docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # setuptools-scm needs to access git tags
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v6
        with:
          context: .
          cache-from: type=gha
          # cache-to: type=gha,mode=min
          file: Dockerfile
          tags: ${{ env.DOCKER_IMAGE_NAME }}:local
          load: true
      - name: install apptainer
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          curl -fSL https://raw.githubusercontent.com/WIPACrepo/wipac-dev-tools/refs/heads/main/resources/install_apptainer.sh -o install_apptainer.sh
          bash -x install_apptainer.sh
      - name: build apptainer image (.sif)
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          apptainer build $(basename ${{ env.DOCKER_IMAGE_NAME }}).sif docker-daemon://${{ env.DOCKER_IMAGE_NAME }}:local
          ls -lh $(basename ${{ env.DOCKER_IMAGE_NAME }}).sif
      - name: run apptainer container
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          apptainer run $(basename ${{ env.DOCKER_IMAGE_NAME }}).sif \
            ls

  unit-test:
    needs: [ py-versions ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # setuptools-scm needs to access git tags
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py3 }}
      - name: pip install
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          pip install .[tests]
      - name: pytest
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          pytest -vvv tests/unit/

  integration-test-ish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # setuptools-scm needs to access git tags
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v6
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=min
          file: Dockerfile
          tags: ${{ env.DOCKER_IMAGE_NAME }}:local
          load: true           # make the image available to `docker run` on this runner
      - name: test
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          set -ex
          
          docker run --rm \
              $(env | grep '^EWMS_' | awk '$0="--env "$0') \
              $(env | grep '^JOB_EVENT_LOG_' | awk '$0="--env "$0') \
              --env JOB_EVENT_LOG_DIR="/jel/$JOB_EVENT_LOG_DIR" \
              --mount type=bind,source="$(realpath $JOB_EVENT_LOG_DIR)",target="/jel/$JOB_EVENT_LOG_DIR" \
              ${{ env.DOCKER_IMAGE_NAME }}:local \
              2>&1 | tee docker.out || true
          
          # check that we get the start up errors that we expect 
          grep -Fq "htcondor.HTCondorLocateError: Unable to locate local daemon" docker.out || (echo "Not found" && exit 1) 
          grep -Fq "requests.exceptions.MissingSchema: Invalid URL" docker.out || (echo "Not found" && exit 1)
          
          echo "found all the expected startup errors :)"


  #############################################################################
  # GIT TAG & GITHUB RELEASE
  #############################################################################

  tag-and-release:
    # only run on main/default branch
    if: format('refs/heads/{0}', github.event.repository.default_branch) == github.ref
    needs: [
      flake8,
      mypy,
      py-setup,
      py-versions,
      py-dependencies,
      test-build-docker,
      test-build-apptainer,
      unit-test,
      integration-test-ish,
    ]
    uses: WIPACrepo/wipac-dev-workflows/.github/workflows/tag-and-release.yml@v1.16
    permissions: # for GITHUB_TOKEN
      contents: write
    with:
      project-type: python
      python-version: "${{ fromJSON(needs.py-versions.outputs.matrix)[0] }}"
      release-artifacts: |
        py-dependencies-logs
    secrets:
      TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # trigger tag-event gha workflows
